{"version":3,"sources":["components/lists.tsx","components/employment-table.tsx","components/links.tsx","components/heading.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["ListItem","styled","li","List","ul","listBuilder","items","map","item","Table","table","TableRow","tr","TableData","td","TableDataEndDate","employmentRowBuilder","row","startDate","endDate","position","company","Link","RouterLink","ExtLink","to","children","props","href","target","rel","SmallExtLink","HeadingOne","h1","HeadingTwo","App","rows","aboutList","whatIDoList","config","accounts","github","url","npm","employmentTable","educationList","educations","education","institution","subject","graduatedWith","educationListBuilder","full_name","style","display","primary_email","keybase","marginTop","linkedin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70eddb74.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\nexport const ListItem = styled.li`\n    margin-bottom: 0.4em;\n    margin-left: 3ex;\n\n    &:before {\n        content: \"*\";\n        display: block;\n        margin-left: -3ex;\n        color: #fb0;\n        float:left\n    }\n`;\n\nexport const List = styled.ul`\n    margin-bottom:0.4em\n`;\n\nexport const listBuilder = (items: Array<ReactElement|string>): ReactElement => (\n    <List>\n        {items.map(item => (\n            <ListItem>{item}</ListItem>\n        ))}\n    </List>\n);\n\ninterface Education {\n    institution: string,\n    subject: string,\n    graduatedWith: string\n}\n\nexport const educationListBuilder = (educations: Array<Education>): ReactElement => {\n    const items = educations.map(education => (\n        <>\n            {education.institution}<br />\n            {education.subject}<br />\n            {education.graduatedWith}\n        </>\n    ));\n\n    return listBuilder(items);\n}","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\ninterface Row {\n    startDate: string,\n    endDate?: string,\n    position: string,\n    company?: string\n}\n\nexport const Table = styled.table`\n    border: 0;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\n\nexport const TableRow = styled.tr`\n    border: 0;\n    margin: 0;\n    padding: 0;\n    margin-left: 3ex;\n    white-space: nowrap;\n    vertical-align: top;\n\n    &:before {\n        content: \"***\";\n        display: block;\n        color: #fb0;\n        float: left;\n    }\n`;\n\nexport const TableData = styled.td`\n    border: 0;\n    margin: 0;\n    padding: 0;\n    margin-bottom: 0.4em;\n`;\n\nexport const TableDataEndDate = styled(TableData)`\n    &:before {\n        content: \"---\";\n    };\n\n    &:after {\n        content: \":::\";\n    };\n`;\n\nexport const employmentRowBuilder = (row: Row): ReactElement => (\n    <TableRow>\n        <TableData>{row.startDate}</TableData>\n        <TableDataEndDate>{row.endDate ?? 'present'}</TableDataEndDate>\n        <TableData>{row.position}{row.company ? `, ${row.company}` : null}</TableData>\n    </TableRow>\n);\n\nexport const employmentTableBuilder = (rows: Array<Row>): ReactElement => (\n    <Table>\n        {rows.map(employmentRowBuilder)}\n    </Table>\n);","import React, { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Link = styled(RouterLink)`\n  margin-bottom: 0.4em;\n  text-decoration: none;\n\n  &:before {\n    content: \"[\"\n  }\n\n  &:after {\n    content: \"]\"\n  }\n`;\n\nexport const SmallLink = styled(Link)`\n  font-size: 85%\n`;\n\ninterface ExtLinkProps {\n  to: string,\n  children: any,\n  [x: string]: any\n}\n\nconst BaseExtLink: FC<ExtLinkProps> = ({ to, children, ...props }) => (\n  <a href={to} target='_blank' rel='noopener noreferrer' {...props} >{children}</a>\n);\n\nexport const ExtLink = styled(BaseExtLink)`\nmargin-bottom: 0.4em;\ntext-decoration: none;\n\n&:before {\n  content: \"[\"\n}\n\n&:after {\n  content: \"]\"\n}\n`;\n\nexport const SmallExtLink = styled(ExtLink)`\n  font-size: 85%\n`;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nexport const HeadingOne = styled.h1`\n    color:#900;\n\n    font-family: monospace;\n    font-size: 1em;\n    font-weight: normal;\n\n    margin-bottom:1em;\n    margin-top: 2em;\n\n    &:before {\n        content: '# ';\n        color: #09a;\n    }\n`;\n\nexport const HeadingTwo = styled(HeadingOne)`\n    &:before {\n        content: '## ';\n    }\n`;\n\nexport const HeadingThree = styled(HeadingOne)`\n    &:before {\n        content: '### ';\n    }\n`;\n\nexport const HeadingFour = styled(HeadingOne)`\n    &:before {\n        content: '#### ';\n    }\n`;\n\nexport const HeadingFive = styled(HeadingOne)`\n    &:before {\n        content: '##### ';\n    }\n`;\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport config from '../config/config.json';\nimport { educationListBuilder, listBuilder } from './lists';\nimport { employmentTableBuilder } from './employment-table';\nimport { ExtLink, SmallExtLink } from './links';\nimport { HeadingOne, HeadingTwo } from './heading'\n\nexport const App: FC = () => {\n\n  const aboutList = listBuilder([\n    <>Software Engineer at <ExtLink to=\"https://3ap.ch\">3AP</ExtLink></>,\n    'Hails from Yorkshire, England, UK',\n    'Resides in Zurich, Switzerland'\n  ]);\n\n  const whatIDoList = listBuilder([\n    <>Programming:{' '}\n    <ExtLink rel=\"me\" to={config.accounts.github.url}>GitHub</ExtLink>,{' '}\n    <ExtLink rel=\"me\" to={config.accounts.npm.url}>NPM</ExtLink>\n    </>,\n    \"Tabletop gaming, Boardgames, D&D\",\n    \"Other nerdy stuff\"\n  ]);\n\n  const employmentTable = employmentTableBuilder([\n    {\n      company: '3AP',\n      position: 'Fullstack Software Engineer',\n      startDate: '2020/01'\n    },\n    {\n      company: 'R3PI',\n      position: 'Backend/Middleware Developer',\n      startDate: '2018/02',\n      endDate: '2019/11'\n    },\n    {\n      company: 'The Distance',\n      position: 'Backend Developer',\n      startDate: '2017/03',\n      endDate: '2017/08'\n    },\n    {\n      company: 'University of Northampton',\n      position: 'Lab Assistant (Software Eng.)',\n      startDate: '2014',\n      endDate: '2015'\n    }\n  ]);\n\n  const educationList = educationListBuilder([\n    {\n      institution: 'University of Northampton',\n      subject: 'Studied Software Engineering',\n      graduatedWith: 'Graduated with First-class honours (First, 1:1)',\n    },\n    {\n      institution: 'Wakefield College',\n      subject: 'Studied Engineering, then Digital Media',\n      graduatedWith: 'Graduated with Distinction-Merit',\n    }\n  ]);\n\n  return (\n    <Router>\n\n      <HeadingOne>{config.full_name}</HeadingOne>\n\n      <div style={{display : 'block'}}>\n        <ExtLink to={`mailto:${config.primary_email}`} rel='me' >{config.primary_email}</ExtLink>,\n      </div>\n      <div style={{display : 'block'}}>\n        <SmallExtLink to={config.accounts.keybase.url} rel='me'>Keybase</SmallExtLink>\n      </div>\n\n      <HeadingTwo>About</HeadingTwo>\n      {aboutList}\n\n      <HeadingTwo>What I Do</HeadingTwo>\n      {whatIDoList}\n\n      <HeadingTwo>Work</HeadingTwo>\n      {employmentTable}\n\n      <HeadingTwo>Education</HeadingTwo>\n      {educationList}\n\n      <p style={{marginTop: '2em'}}>\n        More info on <ExtLink rel=\"me\" to={config.accounts.linkedin.url}>LinkedIn</ExtLink>\n      </p>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'; // ../node_modules/normalize.css/\n\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}